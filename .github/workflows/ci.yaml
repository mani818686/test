# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  IMAGE_TAG: latest
  AWS_REGION: us-east-1
  ECR_REPOSITORY: test/job-portal
  ECS_TASK_DEFINITION: JP-td
  ECS_SERVICE: Jp-service
  ECS_CLUSTER: JP-Cluster
  CONTAINER_NAME: frontend
jobs: 
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
         # Step 2: Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

     # Step 3: Set up environment variables
    - name: Define Repository URI
      run: echo "REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV

    - name: Build Docker Image
      run: |
        docker build -t $REPOSITORY_URI:${{github.sha}} .

      # Push Docker Image to ECR
    - name: Push Docker Image to ECR
      run: |
        docker push $REPOSITORY_URI:${{github.sha}}
      
    # Register ECS Task Definition without using a JSON file
    - name: Register ECS Task Definition
      id: register-task-def
      run: |
        TASK_DEF=$(aws ecs register-task-definition \
          --family "${{ env.ECS_TASK_DEFINITION }}" \
          --container-definitions "[{
            \"name\": \"${{ env.CONTAINER_NAME }}\",
            \"image\": \"$REPOSITORY_URI:${{ github.sha }}\",
            \"memory\": 512,
            \"cpu\": 256,
            \"essential\": true,
            \"portMappings\": [
              {
                \"containerPort\": 3000,
                \"hostPort\": 3000,
                \"protocol\": \"tcp\"
              }
            ]
          }]" \
          --region $AWS_REGION)
          
        # Extract task definition revision (family:revision)
        echo "::set-output name=task-definition::$(echo $TASK_DEF | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')"
    
      # Get the latest task definition ARN
    - name: Get Latest Task Definition ARN
      run: |
        TASK_DEFINITION_ARN=$(aws ecs list-task-definitions  \
          --family-prefix "${{ env.ECS_TASK_DEFINITION }}" \
          --sort DESC \
          --max-items 1 \
          --query "taskDefinitionArns[0]" \
          --output "json"
          )
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

    - name: Update ECS Service
      run: |
        aws ecs update-service \
        --cluster ${{ env.ECS_CLUSTER }} \
        --service ${{ env.ECS_SERVICE }} \
        --task-definition $TASK_DEFINITION_ARN \
        --region $AWS_REGION \
        --desired-count 1 \
        --force-new-deployment